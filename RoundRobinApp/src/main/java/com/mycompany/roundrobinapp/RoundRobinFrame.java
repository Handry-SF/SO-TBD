/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.roundrobinapp;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class RoundRobinFrame extends javax.swing.JFrame {

    public static int quantum; // Variable estática para el quantum.
    private ArrayList<Proceso> colaProcesos = new ArrayList<>();
    private int numeroProceso = 1;
    DefaultTableModel tableModel = new DefaultTableModel();



    
    /**
     * Creates new form RoundRobinFrame
     */
    public RoundRobinFrame() {
        initComponents();
        // Agregar una columna a la tabla
        tableModel.addColumn("Procesos");

        // Asignar el modelo de tabla a la tabla tbProcesos
        tbProcesos.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtQuantum = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtTiempo = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProcesos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Agregar procesos:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, -1, -1));

        jLabel3.setText("Quantum:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, -1, -1));

        txtQuantum.setToolTipText("");
        txtQuantum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantumActionPerformed(evt);
            }
        });
        getContentPane().add(txtQuantum, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 110, 80, -1));

        jLabel4.setText("Nombre:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        jLabel5.setText("Tiempo:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, -1));

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        getContentPane().add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 80, -1));

        txtTiempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTiempoActionPerformed(evt);
            }
        });
        getContentPane().add(txtTiempo, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 110, 80, -1));

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 150, -1, -1));

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });
        getContentPane().add(btnIniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 270, -1, -1));

        tbProcesos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbProcesos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 160, 200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtQuantumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantumActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtTiempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTiempoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTiempoActionPerformed

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // Verificar si el campo txtQuantum contiene un valor entero.
        try {
            quantum = Integer.parseInt(txtQuantum.getText().trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Ingrese un valor entero válido en el campo Quantum.");
            return; // Salir del método si no es un valor entero válido.
        }
        
        // Verificar si hay procesos agregados en colaProcesos.
        if (colaProcesos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay procesos agregados en la cola.");
            return; // Salir del método si no hay procesos agregados.
        }
        
        // En el método donde creas la instancia de RoundRobinProcesos
        RoundRobinProcesos rrProcesos = new RoundRobinProcesos(colaProcesos, quantum);
        rrProcesos.setVisible(true);
        this.dispose(); // Cierra la ventana actual si se abre la otra.
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // Verifica si el campo de nombre está vacío
        String nombre = txtNombre.getText().trim();
        if (nombre.isEmpty()) {
            // Si está vacío, genera un nombre de proceso por defecto con el número secuencial
            nombre = "Proceso " + numeroProceso;
        }

        // Verifica si el campo de tiempo está vacío
        String tiempoStr = txtTiempo.getText().trim();
        if (tiempoStr.isEmpty()) {
            // Si está vacío, genera un tiempo aleatorio entre 1 y 10
            int tiempoAleatorio = (int) (1 + Math.random() * 10);
            tiempoStr = String.valueOf(tiempoAleatorio);
        }

        int tiempo = Integer.parseInt(tiempoStr);
        Proceso proceso = new Proceso(numeroProceso, nombre, tiempo);
        colaProcesos.add(proceso);
        numeroProceso++; // Incrementa el contador solo después de agregar el proceso
        actualizarTablaProcesos();
    }//GEN-LAST:event_btnAgregarActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoundRobinFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoundRobinFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoundRobinFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoundRobinFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoundRobinFrame().setVisible(true);
            }
        });
    }
    
    private void actualizarTablaProcesos() {
        // Borra todos los datos existentes en la tabla
        while (tableModel.getRowCount() > 0) {
            tableModel.removeRow(0);
        }

        // Agrega cada proceso a la tabla
        for (Proceso proceso : colaProcesos) {
            tableModel.addRow(new Object[]{proceso.getNombre()});
        }
    }
    
    class Proceso {
        private int numero;
        private String nombre;
        private int tiempo;
        private int tiempoRestante; // Nuevo campo para el tiempo restante

        public Proceso(int numero, String nombre, int tiempo) {
            this.numero = numero;
            this.nombre = nombre;
            this.tiempo = tiempo;
            this.tiempoRestante = tiempo; // Inicialmente, el tiempo restante es igual al tiempo total.
        }

        public int getNumero() {
            return numero;
        }

        public String getNombre() {
            return nombre;
        }

        public int getTiempo() {
            return tiempo;
        }

        public int getTiempoRestante() {
            return tiempoRestante;
        }

        public void setTiempoRestante(int tiempoRestante) {
            this.tiempoRestante = tiempoRestante;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbProcesos;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtQuantum;
    private javax.swing.JTextField txtTiempo;
    // End of variables declaration//GEN-END:variables
}
